// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO public.events(
    id,
    title, 
    description,
    start_time,
    end_time,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, title, description, start_time, end_time, created_at
`

type CreateEventParams struct {
	ID          uuid.UUID
	Title       string
	Description *string
	StartTime   pgtype.Timestamptz
	EndTime     pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.CreatedAt,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
	)
	return i, err
}

const getEventById = `-- name: GetEventById :one
SELECT id, title, description, start_time, end_time, created_at
FROM
public.events
where id = $1
order by start_time
`

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, description, start_time, end_time, created_at
FROM events
ORDER BY start_time ASC
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
